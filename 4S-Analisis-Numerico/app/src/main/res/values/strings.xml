<resources xmlns:tools="http://schemas.android.com/tools">
    <string name="app_name">4´S Análisis Numérico</string>
    <string name="selec_option">Menu</string>

    <string name="close">Cerrar</string>
    <string name="fx">Función f(x)</string>
    <string name="ffx">Primera Derivada</string>
    <string name="fffx">Segunda Derivada</string>
    <string name="gx">Función g(x)</string>
    <string name="xi">Limite Inferior x0</string>
    <string name="xs">Limite Superior x1</string>
    <string name="x0">Variable Inicial</string>
    <string name="tol">Tolerancia</string>
    <string name="iter">Numero de Iteraciones</string>
    <string name="res">Resultado</string>
    <string name="send">Calcular</string>
    <string name="del">Delta</string>
    <string name="sel">Opciones</string>
    <string name="numPoint">Numero de Puntos</string>
    <string name="lambda">Lambda</string>


    <string name="bisection">Bisección</string>
    <string name="false_rule">Regla Falsa</string>
    <string name="fixed_point">Punto Fijo</string>
    <string name="incremental_search">Busqueda Incremental</string>
    <string name="multiple_roots">Raices Multiples</string>
    <string name="newton">Newton</string>
    <string name="Secant">Secante</string>
    <string name="graph">Graficador</string>
    <string name="gaussian_Elimination">Eliminación Gaussiana</string>
    <string name="LUFactorization_Cholesky">LU Factorizacion Cholesky</string>
    <string name="LUFactorization_Doolittle">LU Factorizacion Doolittle</string>
    <string name="LUFactorization_Crout">LU Factorizacion Crout</string>
    <string name="jacobi">Jacobi</string>
    <string name="gauss_Seidel">Gauss Seidel</string>
    <string name="jacobi_Relaxed">Jacobi Relaxed</string>
    <string name="gauss_Seidel_Relaxed">Gauss Seidel Relaxed</string>

    <string name="dataMatrix">Inserte variable n en el campo A,b</string>
    <string name="createBtn">Crear</string>

    <string name="n">n</string>
    <string name="xiT">xi</string>
    <string name="xsT">xs</string>
    <string name="xm">xm</string>
    <string name="ym">ym</string>
    <string name="error">error</string>
    <string name="x0T">x0</string>
    <string name="x1T">x1</string>
    <string name="y0T">y0</string>
    <string name="y1T">y1</string>
    <string name="xn">xn</string>
    <string name="yn">f(xn)</string>
    <string name="dyn">f´(xn)</string>
    <string name="ddyn">f´´(xn)</string>


    <string name="pivotingMethods">Seleccione un metodo de pivote</string>
    <string name="pivotMethods">Metodos de pivote</string>
    <string name="partial">Parcial</string>
    <string name="scaled">Escalonado</string>
    <string name="total">Total</string>


    <string name="bisectionHelp">Bisection method (Help)\n
        Es importante saber, el método supone la existencia de un intervalo con una raíz,
        si una raíz no existe en el intervalo, el método devolverá el error.
        Los datos que el algoritmo solicita ingresar son un Intervalo [xi, xs], un número máximo de
        iteraciones, una tolerancia (qué tan cerca estará el número de la raíz real) y el
        función F que será evaluada.
        Lo que hace el método Bisection es dividir un intervalo en dos, utilizando xn = (xi + xs) / 2,
        y evalúa esta expresión f (x1) * f (xn), siendo xn el número del medio, si el
        la multiplicación es menor que cero, entonces, la nueva x es xn; de lo contrario, la nueva x es xi.
        Este proceso continúa hasta que encuentra una raíz, el error es menor que la tolerancia
        o falla, se ha alcanzado el número máximo de iteraciones o no hay
        raíces en el intervalo.
        La convergencia de este método es lenta, pero siempre convergerá teóricamente. \ N
        ADVERTENCIA: El método no aceptará iteraciones por debajo de 1 y la tolerancia debe ser mayor que 0.
    </string>

    <string name="falseRuleHelp">False Rule (Help)\n
        Es importante saber, el método supone la existencia de un intervalo con una raíz,
        si una raíz no existe en el intervalo, el método devolverá el error.
        Los datos que el algoritmo solicita ingresar son un Intervalo [xi, xs] o [a, b], un máximo
        número de iteraciones, una tolerancia (qué tan cerca estará el número de la raíz real)
        y la función F que será evaluada.
        Lo que hace el método de regla False es dividir un intervalo en dos,
        usando xn = (aF (b) -bF (a)) / (F (b) -F (a)) y evalúa la expresión f (x1) * f (xn),
        Si la multiplicación es menor que cero entonces, el nuevo xs es xn; de lo contrario, el nuevo xs
        es xi. Este proceso continúa hasta que encuentra una raíz, el error es menor que
        la tolerancia o falla, se ha alcanzado el número máximo de iteraciones
        o no hay raíces en el intervalo.
        La convergencia de este método es lenta, pero siempre convergerá teóricamente. \ N
        ADVERTENCIA: El método no aceptará iteraciones por debajo de 1 y la tolerancia debe ser mayor que 0.
    </string>

    <string name="incrementalSearchHelp">
        Búsqueda adicional (Ayuda) \ n
         El mensaje de este método es x0, x1, iteraciones y una función f.
         Este método supone que la función f es continua y nos permite encontrar un
         intervalo con una raíz, mediante la evaluación interactiva de f0 * f1, donde
         f0 = F (x0) y f1 = F (x1). Si la multiplicación es menor que 0, entonces el método
         encuentra una raíz, pero x0 y x1 también pueden ser una raíz.
         El método finaliza cuando encuentra una raíz o completa el número máximo de iteraciones,
         que es un error, si f no es continuo, el evaluador de expresiones enviará
         un error si de alguna manera encuentra una asíntota. \ n
         ADVERTENCIA: El método no aceptará iteraciones en 1 y deltas nulos.
    </string>

    <string name="fixedPointHelp">
        Método de punto fijo (Ayuda) \ n
        Además, conocido como un método abierto, los métodos abiertos se llaman así porque
        no necesitan un intervalo específico, pero con un número pueden comenzar el proceso.
        Este método generará x, número de iteraciones, tolerancia,
        función f y una función g.
        Este método redefine la ecuación original f (x) = 0 y genera una nueva ecuación
        g (x), que permite encontrar un nuevo valor x donde x = g (x) yf (x) coinciden con cero.
        Es importante notar que g (x) es solo una variación de f (x), y hay
        buenas y malas funciones g (x) que están determinadas por estas 3 condiciones:
            1. X es parte de [a, b] yg también es parte de [a, b]
            2. g es continuo en [a, b]
            3. | g '(x) | menos igual k menos 1
        Si estas condiciones se encuentran, el método convergerá teóricamente en una raíz,
        y su velocidad de convergencia dependerá tanto de f (x) como de g (x). \ n
        ADVERTENCIA: El método no aceptará iteraciones por debajo de 1 y la tolerancia debe ser mayor que 0.
    </string>

    <string name="newtonHelp" >
        Método Newton \ n
         Este método es una variante del método de punto fijo, por lo que la forma en que el algoritmo
         el trabajo es similar, la diferencia entre ellos es que g (x) se calcula
         basado en esta fórmula g (x) = [x - (f (x) / f \'(x))].
        Este método es excelente cuando es fácil conocer el primer derivado
         de la función, porque converge a una velocidad mucho más rápida que el método del punto fijo.
         Para obtener una mejor comprensión de la forma en que funciona el método, consulte la ayuda de Punto fijo. \ N
         ADVERTENCIA: El método no aceptará iteraciones por debajo de 1 y la tolerancia debe ser mayor que 0.
    </string>

    <string name="secantHelp" >
        Método de raíces múltiples \ n
         Este método es una variante de los métodos de punto fijo y Newton,
         las raíces múltiples hacen el mismo procedimiento que el método de Newton,
         pero el método calcula la raíz con esta ecuación \ n
         g (x) = x- (f (x) * f \'(x) / ((f\' (x)) ^ 2-f (x) * f \'\' (x))) \ n
         Este método es excelente cuando es fácil conocer la primera y la segunda derivada
         de la función, porque converge a un ritmo mucho más rápido que
         Métodos de punto fijo y Newton.
         Para obtener una mejor comprensión de la forma en que funciona el método, consulte
         la ayuda del Punto fijo. \ n
         ADVERTENCIA: El método no aceptará iteraciones por debajo de 1 y la tolerancia debe ser mayor que 0.
    </string>

    <string name="multipleRootsHelp">
        Multiple Roots Method\n
        This method is a variant of the methods of fixed point and Newton,
        the multiple roots does the same procedure as the Newton method,
        but the method instead calculates the root with this equation
        g(x)=x−(f(x)*f′(x)/((f′(x))^2−f(x)*f′′(x)))
        This method is excellent when it’s easy to know the first and second derivates
        of the function, because it converges on a much faster rate than
        Fixed Point and Newton methods.
        To get a better understanding of the way the method works, please see
        the Fixed Point help.\n
        WARNING: The method won’t accept iterations under 1 and the tolerance must be higher than 0.
    </string>

    <string name="gaussianEliminationHelp">
        Este método tiene dos procesos, el primero es realizar transformaciones
         en el sistema de ecuaciones usando operaciones elementales (multiplicadores) para obtener
         un sistema equivalente de ecuaciones cuya matriz de coeficientes es triangular superior,
         y el segundo es una sustitución de estos valores para obtener el n número de
         resultados de las variables del sistema. Eliminación gaussiana usa sustitución regresiva
         Este método le solicitará una A y una n, siendo A la matriz que se repetirá
         y n es el orden de la matriz cuadrada. \ n
         ADVERTENCIA: El método no aceptará pedidos menores a 2, y en caso de que sea 1, devolverá el mismo
         número.
    </string>

    <string name="LUFactorizationGeneralHelp">
        Las factorizaciones LU se utilizan para resolver un sistema de ecuaciones Ax = b
         usando una permutación de la matriz A para descomponerla en dos matrices L y U.
         Dependiendo del método, la diagonal de la matriz L o U cambiará,
         Cholesky tendrá la diagonal de L y U igual, Crout tendrá todo
         la diagonal de U es 1 y Doolittle tendrá la diagonal de L es 1.
         Después de obtener L y U, ambos se pueden usar con progresivo o regresivo
         sustitución para obtener el resultado de un sistema de ecuaciones.
         Estos métodos provocarán que se descomponga una matriz A y el orden de la matriz cuadrada n. \ N
         ADVERTENCIA: estos métodos no aceptarán pedidos menores de 2, y en caso de que sea 1, devolverán el
         mismo número.
    </string>

    <string name="jacobiHelp">
        Este método se usa para encontrar las raíces en un sistema de ecuaciones usando la misma algoritmia que
         el método de punto fijo.
         Esta estructura de método es como el método de punto fijo, solicita una
         valor inicial para cada variable del sistema de ecuaciones y luego itera.
         Este método tiene casos en los que no converge. La norma para detener el método es la
         Euclidiano.
         Para una mejor comprensión, consulte la ayuda de punto fijo. \ N
         ADVERTENCIA: El método no aceptará pedidos menores a 2, y en caso de que sea 1, devolverá el mismo
         número.
    </string>

    <string name="gaussSeidelHelp">
        Esta estructura de método es una variante del método de Jacobi, solicita una
         valor inicial para cada variable y luego itera, pero no siempre
         convergen, la diferencia entre Jacobi y este es los nuevos valores de
         la matriz se usa inmediatamente en lugar de cada iteración de ciclo externo.
         La norma para detener el método es el euclidiano.
         Para una mejor comprensión, consulte la ayuda de punto fijo y la ayuda de Jacobi. \ N
         ADVERTENCIA: El método no aceptará pedidos menores a 2, y en caso de que sea 1, devolverá el mismo
         número.
    </string>

    <string name="relaxedGeneralHelp">
        El método de relajación se basa en mejorar la convergencia de Jacobi y
         Métodos de Gauss Seidel utilizando una forma alterada de cálculo de los nuevos valores utilizando una lambda.
         Solicita un valor (lambda) y puede hacer que el método converja más rápido,
         más lento o no convergen en absoluto.
    </string>

    <string name="pivotHelp">
        Nota: primero necesita crear y llenar una matriz \ n
        Giro parcial \ n
        Con este método, la idea es encontrar el más grande entre | aik | con k menos igual
        i menos igual a n, y el intercambio se hace para ubicar el más alto elegido en la fila k,
        en otras palabras, el método encontrará el número más alto en cada columna y luego intercambiará
        fila para poner esos números más altos en la diagonal. \ n
        Escalado de pivote \ n
        Al principio, se debe calcular un factor de escala para cada ecuación en el sistema.
        Estos n números se registran en el vector de escala s. Al comenzar la eliminación hacia adelante
        proceso, no usamos arbitrariamente la primera ecuación como la ecuación de pivote. En lugar,
        usamos la ecuación para la cual la relación | ai, 1 | / si es la más grande. Deje que aux1 sea el primero
        índice para el cual esta relación es mayor. Ahora múltiplos apropiados de la ecuación aux1
        se restan de las otras ecuaciones para crear 0's como coeficientes para cada x1
        excepto en la ecuación de pivote. \ n
        Pivotar total \ n
        Este método se basa en cada paso k, el elemento principal en valor absoluto
        se buscará entre los elementos de submatriz que resultan de eliminar la fila f1 a
        f (k-1) y las columnas c1 a c (k-1) en la matriz A, independientemente de la independencia
        condiciones. Una vez detectado, el mayor de estos elementos, las posiciones de filas y columnas
        será reemplazado para colocarlo en Akk. Al realizar el intercambio de columna debe ser
        considera que altera el orden de las variables en el sistema.
    </string>

    <string name="newton_Divided">Newton Divided Differences</string>
    <string name="lagrange">Lagrange</string>
    <string name="neville">Neville</string>
    <string name="linear">Spline Lineal</string>
    <string name="quadratic">Spline Cuadratico</string>
    <string name="cubic">Spline Cubico</string>


    <string name="newton_Divided_Help">Newton Divided Differences (Help)\n
        La idea de este método es la construcción de un polinomio que pasa
         justo a través o cerca de los puntos dados siguiendo la fórmula de p (x) = b0
         (x-x0) + b1 (x-x0) (x-x1) + b2 (x-x0) (x-x1) (x-x2) ... + bn (x-x0) ... (x-xn).
         El método generará dos vectores: x y f (x), el tamaño de los dos vectores (n),
         y un número y que será el número evaluado en el resultado del polinomio,
         en otras palabras, f (y). Usando x y f (x), el método encontrará la diagonal
         de la matriz A usando recursivamente la fórmula A [i, k + 1] = (A [i, k] -A [p, k]) / (X [i] -X [p]),
         el significado de la diagonal son los coeficientes b usados para el polinomio. \ n
         ADVERTENCIA: este método no aceptará tamaños nulos o negativos.
    </string>

    <string name="lagrange_Help">Lagrange (Help)\n
        La idea de este método es la construcción de un polinomio que pasa
         a través o cerca de los puntos dados siguiendo la fórmula
         de p (x) = L0f (x0) + L1f (x1) + L2f (x2) ... + Lnf (xn).
         El método generará un vector x, una función f, el tamaño del vector (n),
         y un número y que será el número evaluado en el resultado del polinomio,
         en otras palabras, f (y). Usando x y f, el método encontrará los coeficientes
         L utilizado para el polinomio utilizando el
         fórmula Ln (x) = (x-x1) ... (x-xn) / (xn - x1) ... (xn - xn-1). \ n
         ADVERTENCIA: este método no aceptará tamaños nulos o negativos.
    </string>

    <string name="neville_Help">Neville (Help)\n
        Este método es una variante del método del Polinomio de Newton, es útil
         porque puede agregar números a la matriz A tanto a la izquierda como a la derecha recursivamente.
         El método generará dos vectores: x y f (x), el tamaño de los dos vectores (n),
         y un número y que será el número evaluado en el resultado del polinomio,
         en otras palabras, f (y) usando la fórmula:
         Pi, i (x) = yi;
         Pi, j (x) = ((xj - x) * pi, j-1 (x) + (x - xi) * pi + 1, j (x)) / xj -xi
         Para obtener una mejor comprensión del método, consulte la Ayuda del Polinomio de Newton. \ N
         ADVERTENCIA: este método no aceptará tamaños nulos o negativos.
    </string>

    <string name="linear_Help">Linear Spline (Help)\n
        Lineal spline se utiliza para simular una función f, f será un conjunto de líneas que
         pasar por los puntos dados. \ n
         Este método generará dos vectores: f y x, el tamaño del
         vectores (n) y un número a evaluar y. \ n
         ADVERTENCIA: este método no aceptará tamaños nulos o negativos.
    </string>

    <string name="quadratic_Help">Quadratic Spline (Help)\n
        Lineal spline se usa para simular una función f, f será un conjunto de parábolas
         que pasan por los puntos dados, la excepción es la primera
         función (x0, x1) siendo una línea. \ n
         Este método generará dos vectores: f y x, el tamaño del
         vectores (n) y un número a evaluar y. \ n
         ADVERTENCIA: este método no aceptará tamaños nulos o negativos.
    </string>

    <string name="cubic_Help">Cubic Spline (Help)\n
        Lineal spline se utiliza para simular una función f, f será un conjunto de curvas
         que pasan por los puntos dados. \ n
         Este método generará dos vectores: f y x, el tamaño del
         vectores (n) y un número a evaluar y. \ n
         ADVERTENCIA: este método no aceptará tamaños nulos o negativos.
    </string>

    <string name="ExceptionE">
        Error, compruebe los datos, si el problema continúa tal vez este método
         no puede funcionar correctamente con los datos proporcionados.
    </string>

    <string name="ExceptionL">
        Error al Cargar la informacion.
    </string>
    <!-- spline -->
    <string name="f_vector">Vector f</string>
    <string name="x_vector">Vector x</string>
    <string name="y_value">Variable y</string>



</resources>
